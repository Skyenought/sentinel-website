{
  "filename": "dashboard.md",
  "__html": "<h1>Sentinel 控制台</h1>\n<h2>1. 概述</h2>\n<p>Sentinel 提供一个轻量级的开源控制台，它提供机器发现以及健康情况管理、监控（单机和集群），规则管理和推送的功能。这里，我们将会详细讲述如何通过简单的步骤就可以使用这些功能。</p>\n<p>接下来，我们将会逐一介绍如何整合 Sentinel 核心库和 Dashboard，让它发挥最大的作用。同时我们也在阿里云上提供企业级的 Sentinel 服务：<a href=\"https://github.com/alibaba/Sentinel/wiki/AHAS-Sentinel-%E6%8E%A7%E5%88%B6%E5%8F%B0\">AHAS Sentinel 控制台</a>，您只需要几个简单的步骤，就能最直观地看到控制台如何实现这些功能，并体验多样化的监控及全自动托管的集群流控能力。</p>\n<p>Sentinel 控制台包含如下功能:</p>\n<ul>\n<li><strong>查看机器列表以及健康情况</strong>：收集 Sentinel 客户端发送的心跳包，用于判断机器是否在线。</li>\n<li><strong>监控 (单机和集群聚合)</strong>：通过 Sentinel 客户端暴露的监控 API，定期拉取并且聚合应用监控信息，最终可以实现秒级的实时监控。</li>\n<li><strong>规则管理和推送</strong>：统一管理推送规则。</li>\n<li><strong>鉴权</strong>：生产环境中鉴权非常重要。这里每个开发者需要根据自己的实际情况进行定制。</li>\n</ul>\n<blockquote>\n<p>注意：Sentinel 控制台目前仅支持单机部署。Sentinel 控制台项目提供 Sentinel 功能全集示例，不作为开箱即用的生产环境控制台，若希望在生产环境使用请根据<a href=\"https://github.com/alibaba/Sentinel/wiki/%E5%9C%A8%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83%E4%B8%AD%E4%BD%BF%E7%94%A8-Sentinel\">文档</a>自行进行定制和改造。</p>\n</blockquote>\n<h2>2. 启动控制台</h2>\n<h3>2.1 获取 Sentinel 控制台</h3>\n<p>您可以从 <a href=\"https://github.com/alibaba/Sentinel/releases\">release 页面</a> 下载最新版本的控制台 jar 包。</p>\n<p>您也可以从最新版本的源码自行构建 Sentinel 控制台：</p>\n<ul>\n<li>下载 <a href=\"https://github.com/alibaba/Sentinel/tree/master/sentinel-dashboard\">控制台</a> 工程</li>\n<li>使用以下命令将代码打包成一个 fat jar: <code>mvn clean package</code></li>\n</ul>\n<h3>2.2 启动</h3>\n<blockquote>\n<p><strong>注意</strong>：启动 Sentinel 控制台需要 JDK 版本为 1.8 及以上版本。</p>\n</blockquote>\n<p>使用如下命令启动控制台：</p>\n<pre><code class=\"language-bash\">java -Dserver.port=8080 -Dcsp.sentinel.dashboard.server=localhost:8080 -Dproject.name=sentinel-dashboard -jar sentinel-dashboard.jar\n</code></pre>\n<p>其中 <code>-Dserver.port=8080</code> 用于指定 Sentinel 控制台端口为 <code>8080</code>。</p>\n<p>从 Sentinel 1.6.0 起，Sentinel 控制台引入基本的<strong>登录</strong>功能，默认用户名和密码都是 <code>sentinel</code>。可以参考 <a href=\"#%E9%89%B4%E6%9D%83\">鉴权模块文档</a> 配置用户名和密码。</p>\n<blockquote>\n<p>注：若您的应用为 Spring Boot 或 Spring Cloud 应用，您可以通过 Spring 配置文件来指定配置，详情请参考 <a href=\"https://github.com/spring-cloud-incubator/spring-cloud-alibaba/wiki/Sentinel\">Spring Cloud Alibaba Sentinel 文档</a>。</p>\n</blockquote>\n<h2>3. 客户端接入控制台</h2>\n<p>控制台启动后，客户端需要按照以下步骤接入到控制台。</p>\n<h3>3.1 引入JAR包</h3>\n<p>客户端需要引入 Transport 模块来与 Sentinel 控制台进行通信。您可以通过 <code>pom.xml</code> 引入 JAR 包:</p>\n<pre><code class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>com.alibaba.csp<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>sentinel-transport-simple-http<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>x.y.z<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n</code></pre>\n<h3>3.2 配置启动参数</h3>\n<p>启动时加入 JVM 参数 <code>-Dcsp.sentinel.dashboard.server=consoleIp:port</code> 指定控制台地址和端口。若启动多个应用，则需要通过 <code>-Dcsp.sentinel.api.port=xxxx</code> 指定客户端监控 API 的端口（默认是 8719）。</p>\n<p>除了修改 JVM 参数，也可以通过配置文件取得同样的效果。更详细的信息可以参考 <a href=\"./startup-configuration.md\">启动配置项</a>。</p>\n<h3>3.3 触发客户端初始化</h3>\n<p><strong>确保客户端有访问量</strong>，Sentinel 会在<strong>客户端首次调用的时候</strong>进行初始化，开始向控制台发送心跳包。</p>\n<blockquote>\n<p>注意：您还需要根据您的应用类型和接入方式引入对应的 <a href=\"./open-source-framework-integrations.md\">适配依赖</a>，否则即使有访问量也不能被 Sentinel 统计。</p>\n</blockquote>\n<h2>4. 查看机器列表以及健康情况</h2>\n<p>当您在机器列表中看到您的机器，就代表着您已经成功接入控制台；如果没有看到您的机器，请检查配置，并通过 <code>${user.home}/logs/csp/sentinel-record.log.xxx</code> 日志来排查原因，详细的部分请参考 <a href=\"./logs.md\">日志文档</a>。</p>\n<p><img src=\"https://user-images.githubusercontent.com/9434884/50627838-5cd92800-0f70-11e9-891e-31430adcbbf4.png\" alt=\"machine-discovery\"></p>\n<blockquote>\n<p>注意：若接入 Sentinel 控制台不成功，可以参考 <a href=\"./faq.md\">FAQ</a> 排查问题。</p>\n</blockquote>\n<blockquote>\n<p>注意：请确保在使用较新版本的浏览器，我们不保证支持旧版本的浏览器。</p>\n</blockquote>\n<h2>5. 监控</h2>\n<h3>5.1 &quot;簇点链路&quot;中显示刚刚调用的资源（单机实时）</h3>\n<p>簇点链路（单机调用链路）页面实时的去拉取指定客户端资源的运行情况。它一共提供两种展示模式：一种用树状结构展示资源的调用链路，另外一种则不区分调用链路展示资源的运行情况。</p>\n<p><strong>注意:</strong> 簇点监控是内存态的信息，它仅展示启动后调用过的资源。</p>\n<table>\n<thead>\n<tr>\n<th>树状链路</th>\n<th>平铺链路</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><img src=\"https://github.com/alibaba/Sentinel/wiki/image/resourceTree.png\" alt=\"resourceTree\"></td>\n<td><img src=\"https://github.com/alibaba/Sentinel/wiki/image/sentine_dashboard.gif\" alt=\"cluster\"></td>\n</tr>\n</tbody>\n</table>\n<h3>5.2 &quot;实时监控&quot;汇总资源信息（集群聚合）</h3>\n<p>同时，同一个服务下的所有机器的簇点信息会被汇总，并且秒级地展示在&quot;实时监控&quot;下。</p>\n<p><strong>注意:</strong> 实时监控仅存储 5 分钟以内的数据，如果需要持久化，需要通过调用<a href=\"./metric.md\">实时监控接口</a>来定制。</p>\n<p><img src=\"https://user-images.githubusercontent.com/9434884/50678855-aa6e9700-103b-11e9-83de-2a33e580325f.png\" alt=\"dashboard-overview\"></p>\n<blockquote>\n<p>注意：请确保 Sentinel 控制台所在的机器时间与自己应用的机器时间保持一致，否则会导致拉不到实时的监控数据。</p>\n</blockquote>\n<h2>6. 规则管理及推送</h2>\n<p>Sentinel 控制台同时提供简单的规则管理以及推送的功能。规则推送分为 3 种模式，包括 &quot;原始模式&quot;、&quot;Pull 模式&quot; 和&quot;Push 模式&quot;。</p>\n<p>这里先简单的介绍&quot;原始模式&quot;。</p>\n<h3>6.1 规则管理</h3>\n<p>您可以在控制台通过接入端暴露的 <a href=\"https://github.com/alibaba/Sentinel/wiki/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8#%E6%9F%A5%E8%AF%A2%E6%9B%B4%E6%94%B9%E8%A7%84%E5%88%99\">HTTP API</a> 来查询规则。</p>\n<p><img src=\"https://user-images.githubusercontent.com/9434884/48189045-2ae58400-e37a-11e8-84aa-2e2c0dd042e2.png\" alt=\"rules\"></p>\n<h3>6.2 规则推送</h3>\n<p><img src=\"https://user-images.githubusercontent.com/9434884/48189035-25883980-e37a-11e8-8f25-3f3f5be23f0e.png\" alt=\"dashboard-add-rule\"></p>\n<p>目前控制台的规则推送也是通过 <a href=\"https://github.com/alibaba/Sentinel/wiki/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8#%E6%9F%A5%E8%AF%A2%E6%9B%B4%E6%94%B9%E8%A7%84%E5%88%99\">规则查询更改 HTTP API</a> 来更改规则。这也意味着这些规则<strong>仅在内存态生效</strong>，应用重启之后，该规则会丢失。</p>\n<p>以上是原始模式。当了解了原始模式之后，我们非常鼓励您通过 <a href=\"./dynamic-rule-configuration.md\">动态规则</a> 并结合各种外部存储来定制自己的规则源。我们推荐通过动态配置源的控制台来进行规则写入和推送，而不是通过 Sentinel 客户端直接写入到动态配置源中。在生产环境中，我们推荐 <strong>push 模式</strong>，具体可以参考：<a href=\"https://github.com/alibaba/Sentinel/wiki/%E5%9C%A8%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83%E4%B8%AD%E4%BD%BF%E7%94%A8-Sentinel\">在生产环境使用 Sentinel</a>。</p>\n<blockquote>\n<p><strong>注：若要使用集群流控功能，则必须对接动态规则源，否则无法正常使用。您也可以接入 <a href=\"https://help.aliyun.com/document_detail/174871.html\">AHAS Sentinel</a> 快速接入全自动托管、高可用的集群流控能力。</strong></p>\n</blockquote>\n<p>Sentinel 同时还提供应用维度规则推送的示例页面（流控规则页面，前端路由为 <code>/v2/flow</code>），用户改造控制台对接配置中心后可直接通过 v2 页面推送规则至配置中心。Sentinel 抽取了通用接口用于向远程配置中心推送规则以及拉取规则：</p>\n<ul>\n<li><code>DynamicRuleProvider&lt;T&gt;</code>: 拉取规则（应用维度）</li>\n<li><code>DynamicRulePublisher&lt;T&gt;</code>: 推送规则（应用维度）</li>\n</ul>\n<p>用户只需实现 <code>DynamicRuleProvider</code> 和 <code>DynamicRulePublisher</code> 接口，并在 v2 的 controller 中通过 <code>@Qualifier</code> 注解替换相应的 bean 即可实现应用维度推送。我们提供了 Nacos 和 Apollo 的示例，改造详情可参考 <a href=\"https://github.com/alibaba/Sentinel/wiki/Sentinel-%E6%8E%A7%E5%88%B6%E5%8F%B0%EF%BC%88%E9%9B%86%E7%BE%A4%E6%B5%81%E6%8E%A7%E7%AE%A1%E7%90%86%EF%BC%89#%E8%A7%84%E5%88%99%E9%85%8D%E7%BD%AE\">应用维度规则推送示例</a>。</p>\n<h2>鉴权</h2>\n<p>从 Sentinel 1.5.0 开始，控制台提供通用的鉴权接口 <a href=\"https://github.com/alibaba/Sentinel/blob/master/sentinel-dashboard/src/main/java/com/alibaba/csp/sentinel/dashboard/auth/AuthService.java\">AuthService</a>，用户可根据需求自行实现。</p>\n<p>从 Sentinel 1.6.0 起，Sentinel 控制台引入基本的<strong>登录</strong>功能，默认用户名和密码都是 <code>sentinel</code>。</p>\n<p><img src=\"https://user-images.githubusercontent.com/9434884/56669344-94b4d880-66e3-11e9-9553-731d67651a11.png\" alt=\"login-page\"></p>\n<p>用户可以通过如下参数进行配置：</p>\n<ul>\n<li><code>-Dsentinel.dashboard.auth.username=sentinel</code> 用于指定控制台的登录用户名为 <code>sentinel</code>；</li>\n<li><code>-Dsentinel.dashboard.auth.password=123456</code> 用于指定控制台的登录密码为 <code>123456</code>；如果省略这两个参数，默认用户和密码均为 <code>sentinel</code>；</li>\n<li><code>-Dserver.servlet.session.timeout=7200</code> 用于指定 Spring Boot 服务端 session 的过期时间，如 <code>7200</code> 表示 7200 秒；<code>60m</code> 表示 60 分钟，默认为 30 分钟；</li>\n</ul>\n<p>同样也可以直接在 Spring properties 文件中进行配置。</p>\n<h2>控制台配置项</h2>\n<p>控制台的一些特性可以通过配置项来进行配置，配置项主要有两个来源：<code>System.getProperty()</code> 和 <code>System.getenv()</code>，同时存在时后者可以覆盖前者。</p>\n<blockquote>\n<p>通过环境变量进行配置时，因为不支持 <code>.</code> 所以需要将其更换为 <code>_</code>。</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>配置项</th>\n<th>类型</th>\n<th>默认值</th>\n<th>最小值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>auth.enabled</td>\n<td>boolean</td>\n<td>true</td>\n<td>-</td>\n<td>是否开启登录鉴权，仅用于日常测试，生产上不建议关闭</td>\n</tr>\n<tr>\n<td>sentinel.dashboard.auth.username</td>\n<td>String</td>\n<td>sentinel</td>\n<td>-</td>\n<td>登录控制台的用户名，默认为 <code>sentinel</code></td>\n</tr>\n<tr>\n<td>sentinel.dashboard.auth.password</td>\n<td>String</td>\n<td>sentinel</td>\n<td>-</td>\n<td>登录控制台的密码，默认为 <code>sentinel</code></td>\n</tr>\n<tr>\n<td>sentinel.dashboard.app.hideAppNoMachineMillis</td>\n<td>Integer</td>\n<td>0</td>\n<td>60000</td>\n<td>是否隐藏无健康节点的应用，距离最近一次主机心跳时间的毫秒数，默认关闭</td>\n</tr>\n<tr>\n<td>sentinel.dashboard.removeAppNoMachineMillis</td>\n<td>Integer</td>\n<td>0</td>\n<td>120000</td>\n<td>是否自动删除无健康节点的应用，距离最近一次其下节点的心跳时间毫秒数，默认关闭</td>\n</tr>\n<tr>\n<td>sentinel.dashboard.unhealthyMachineMillis</td>\n<td>Integer</td>\n<td>60000</td>\n<td>30000</td>\n<td>主机失联判定，不可关闭</td>\n</tr>\n<tr>\n<td>sentinel.dashboard.autoRemoveMachineMillis</td>\n<td>Integer</td>\n<td>0</td>\n<td>300000</td>\n<td>距离最近心跳时间超过指定时间是否自动删除失联节点，默认关闭</td>\n</tr>\n<tr>\n<td>sentinel.dashboard.unhealthyMachineMillis</td>\n<td>Integer</td>\n<td>60000</td>\n<td>30000</td>\n<td>主机失联判定，不可关闭</td>\n</tr>\n<tr>\n<td><a href=\"http://server.servlet.session.cookie.name\">server.servlet.session.cookie.name</a></td>\n<td>String</td>\n<td>sentinel_dashboard_cookie</td>\n<td>-</td>\n<td>控制台应用的 cookie 名称，可单独设置避免同一域名下 cookie 名冲突</td>\n</tr>\n</tbody>\n</table>\n<p>配置示例：</p>\n<ul>\n<li>命令行方式：</li>\n</ul>\n<pre><code class=\"language-shell\">java -Dsentinel.dashboard.app.hideAppNoMachineMillis=60000\n</code></pre>\n<ul>\n<li>Java 方式：</li>\n</ul>\n<pre><code class=\"language-java\">System.setProperty(<span class=\"hljs-string\">\"sentinel.dashboard.app.hideAppNoMachineMillis\"</span>, <span class=\"hljs-string\">\"60000\"</span>);\n</code></pre>\n<ul>\n<li>环境变量方式：</li>\n</ul>\n<pre><code class=\"language-shell\">sentinel_dashboard_app_hideAppNoMachineMillis=60000\n</code></pre>\n"
}